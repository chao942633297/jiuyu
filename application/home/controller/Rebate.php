<?php

namespace app\home\controller;

use app\backsystem\model\AccountModel;
use app\backsystem\model\ApplyModel;
use app\backsystem\model\RowModel;
use app\backsystem\model\UserModel;
use Thenbsp\Wechat\User\User;
use think\App;
use think\Controller;
use think\Db;
use think\Exception;

class Rebate extends Controller
{

    protected $matchA;
    protected $matchB;
    protected $matchC;
    protected $directA;
    protected $directB;
    protected $directC;
    protected $thanksA;
    protected $thanksB;
    protected $thanksC;
    protected $area_ach;
    protected $city_ach;
    protected $province_ach;
    protected $head_ach;
    static $times;

    public function _initialize()
    {
//        parent::_initialize(); // TODO: Change the autogenerated stub
        //参数设置,从配置读取
        $config = file_get_contents('config');
        $conf = unserialize($config);
        $this->directA = $conf['pushA'];                  //报单中心直推奖励
        $this->directB = $conf['pushB'];                  //报单中心直推奖励
        $this->directC = $conf['pushC'];                  //报单中心直推奖励

        $this->thanksA = $conf['thanksA'];                  //公排获得感恩奖
        $this->thanksB = $conf['thanksB'];                  //公排获得感恩奖
        $this->thanksC = $conf['thanksC'];                  //公排获得感恩奖

        $this->matchA = $conf['actA'];                    //匹配报单中心奖励
        $this->matchB = $conf['actB'];                    //匹配报单中心奖励
        $this->matchC = $conf['actC'];                    //匹配报单中心奖励

        $this->area_ach = $conf['area_ach']*0.01;            //县级报单中心业绩比例
        $this->city_ach = $conf['city_ach']*0.01;            //市级报单中心业绩比例
        $this->province_ach = $conf['province_ach']*0.01;    //省级报单中心业绩比例
        $this->head_ach = $conf['head_ach']*0.01;    //总部报单中心
//        $this->manage = $conf['manage'];    //管理奖
    }

    /**
     * @param $addr
     * @return bool
     * 用户成为合伙人,
     * 激活人(需是报单中心)获取业绩,
     * 上级报单中心业绩增加
     */
    public function partnerRebate($actId, $userId,$voucherId)
    {
        //报单中心业绩计算
        if(empty($voucherId)){
            return false;
        }
        $voucher = Db::table('sql_voucher')->where('id',$voucherId)->find();
        $match = 'match'.$voucher['type'];          //套餐对应报单中心奖励



        $achievement = 0;
        $reword = UserModel::get($actId);
        $i = 0;
        if($reword['class'] == 5){     //省级报单中心,直接计算业绩
            $achievement = bcmul($voucher['money'],$this->province_ach);           //激活者业绩分红
        }
        if($reword['class'] <= 4){            //市级报单中心,判断省级报单中心是否存在,并计算业绩
            $achievement = bcmul($voucher['money'],$this->city_ach);           //激活者业绩分红
            $provinceId = Db::table('sql_voucher')
                ->where(['province'=>$voucher['province'],'status'=>2])->value('uid');
            if(!empty($provinceId)){
                $provinceAchievement = bcmul($voucher['money'],$this->province_ach);
                if($provinceAchievement > 0){
                    $newList[$i] = [                   //增加余额
                        'balance' => ['exp', 'balance + ' . $provinceAchievement],
                        'total_price' => ['exp', 'total_price + ' . $provinceAchievement],
                        'id' => $provinceId
                    ];
                    //增加余额记录
                    $lists[$i] = AccountModel::getAccountData($provinceId, $achievement, '业绩分红', 9, 1, $voucher['type'],$userId);
                    $i ++;
                }
            }
        }
        if($reword['class'] == 3){          //县级报单中心,判断市级报单中心是否存在,并计算业绩
            $achievement = bcmul($voucher['money'],$this->area_ach);           //激活者业绩分红
            $cityId = Db::table('sql_apply')
                ->where(['province'=>$voucher['province'],'city'=>$voucher['city'],'status'=>2])->value('uid');
            if(!empty($cityId)){
                $cityAchievement = bcmul($voucher['money'],$this->city_ach);
                if($cityAchievement > 0){
                    $newList[$i] = [
                        'balance' => ['exp', 'balance + ' . $cityAchievement],
                        'total_price' => ['exp', 'total_price + ' . $cityAchievement],
                        'id' => $cityId
                    ];
                    $lists[$i] = AccountModel::getAccountData($cityId, $achievement, '业绩分红', 9, 1, $voucher['type'],$userId);
                    $i ++;
                }
            }
        }
        $money = $this->$match + $achievement;       //用户余额总增加
        Db::startTrans();
        try {
            //增加用户余额
            $newList[$i] = [
                'balance' => ['exp', 'balance + ' . $money],
                'total_price' => ['exp', 'total_price + ' . $money],
                'id' => $actId
            ];
            db('users')->update($newList);
            //增加余额记录
            $lists[$i] = AccountModel::getAccountData($actId, $this->$match, '激活奖', 8, 1,$voucher['type'], $userId);
            $i ++;
            if ($achievement > 0) {
                $lists[$i] = AccountModel::getAccountData($actId, $achievement, '业绩分红', 9, 1, $voucher['type'],$userId);
            }
            db('account')->insertAll($lists);
            Db::commit();
            return true;
        } catch (Exception $e) {
            Db::rollback();
            return false;
        }
    }


    /**
     * @param $prentId
     * @return bool
     * 成为合伙人,上级报单中心返佣
     */
    public function superRebate($userId, $prentId = '', $voucherId)
    {
        $user = UserModel::get($userId);
        if (empty($prentId)) {
            $prentId = $user['pid'];
        }
        //用户没有上级
        if (empty($prentId)) {
            return true;
        }
        $voucher = Db::table('sql_voucher')->where('id', $voucherId)->find();
        if (empty($voucher)) {
            return true;
        }
        $packageType = $voucher['type'];
        //拼接直推奖金额
        $direct = 'direct' . $packageType;

        if(!strstr($user['pusers']['level'],$packageType)){          //上级未购买此套餐,无法获得直推奖
            return false;
        }
        Db::startTrans();
        try {
            //上级余额增加
            $prentList = [
                'id' => $prentId,
                'recommend_num' => ['exp', 'recommend_num + 1'],
                'balance' => ['exp', 'balance + ' . $this->$direct],
                'total_price' => ['exp', 'total_price + ' . $this->$direct]
            ];
            Db::table('sql_users')->update($prentList);
            //增加余额记录
            $list = AccountModel::getAccountData($prentId, $this->$direct, '直推奖', 1, 1,$packageType, $userId,2);
            AccountModel::create($list);
            //查看上级是否存在上级, 上二级冻结金额转化为余额  -- 指定套餐的直推奖
            $twoId = db('users')->where('id', $prentId)->value('pid');
            if ($twoId) {
                $totalMoney = db('account')->where(['uid' => $twoId, 'from_uid' => $prentId, 'type' => 1, 'package_type' => $packageType, 'status' => 1])->sum('balance');
                $newList = [
                    'id' => $twoId,
                    'balance' => ['exp', 'balance + ' . $totalMoney],
                    'total_price' => ['exp', 'total_price + ' . $totalMoney],
                    'frozen_price' => ['exp', 'frozen_price - ' . $totalMoney]
                ];
                db('users')->update($newList);
                //修改直推奖状态
                db('account')->where(['uid' => $twoId, 'from_uid' => $prentId, 'package_type' => $packageType, 'type' => 1, 'status' => 1])->update(['status' => 2]);
            }

            //判断激活用户是否是上级第一个直推人,是的话就判断上级是否存在感恩奖
            $row = 'sql_row' . $packageType;
            if ($prentId != 1 && db('users')->where(['pid' => $prentId, 'class' => ['GT', 1]])->count() < 2) {
                //判断是否是上级用户第一个直推人
                $selfCount = Db::table($row)->where(['user_id' => $prentId, 'position' => 1])->select();   //获取上级用户出局情况,(是否获得感恩奖)
                if ($selfCount) {    //若已获得感恩奖,则解冻获得的感恩奖
                    $list = [];
                    foreach ($selfCount as $key => $val) {
                        $time = $val['time'];
                        $row = Db::table($row)
                            ->order('position', 'asc')
                            ->field('id,user_id,user_phone,time,position')
                            ->where('time', $time)->select();
                        if (count($row) == 7) {
                            $thanks = 'thanks' . $packageType;
                            $conversion = $this->$thanks * 4 - $voucher['money'];

                            //感恩奖纪录改变
                            $fourId = [
                                $row[3]['user_id'],
                                $row[4]['user_id'],
                                $row[5]['user_id'],
                                $row[6]['user_id']
                            ];
                            $res = db('account')->where(['uid' => $prentId, 'type' => 2, 'from_uid' => ['in', $fourId], 'status' => 1])->update(['status' => 2]);
                            if ($res) {
                                $data = [
                                    'id' => $prentId,
                                    'balance' => ['exp', 'balance +' . $conversion],
                                    'total_price' => ['exp', 'total_price + ' . $conversion],
                                    'frozen_price' => ['exp', 'frozen_price -' . $conversion]
                                ];
                                db('users')->update($data);
                                $list[] = AccountModel::getAccountData($prentId, $conversion, '冻结金额转化', 10, 1, $row[6]['user_id']);
                            }
                            //增加余额增加记录
                        }
                    }
                    db('account')->insertAll($list);
                }
            }
            Db::commit();
            return true;
        } catch(Exception $e) {
            Db::rollback();
            return false;
//            return $e->getMessage();
        }

    }

    //成为合伙人进入公排
    public function goQualifying($userId, $user_phone, $voucherId, $prentId = '',$recast = '')
    {
        if (empty($prentId)) {
            $prentId = db('users')->where('id', $userId)->value('pid');
        }
        $voucher = Db::table('sql_voucher')->where('id', $voucherId)->find();
        if (empty($voucher)) {
            return false;
        }
        $row = 'sql_row' . $voucher['type'];         //对应公排
        $thanks = 'thanks'.$voucher['type'];        //对应的感恩奖
        //根据上级在公排的位置,获取自己的位置,
        $result = $this->getPosition($prentId, $row);
        $time = $result['time'];
        $position = $result['position'];
        if ($time && $position) {
            $list = RowModel::getRowData($userId, $user_phone, $time, $position);
            $rowlist = Db::table($row)->insert($list);
        } else {
            if($recast == 1){
                return false;                  //若上级7人小组满,则新建小组(复投)
            }else{                                     //首次购买
                $lastId = Db::table($row)->order('time','desc')->value('time');
                $rowData = RowModel::getRowData($userId,$user_phone,$lastId+1,1);
                Db::table($row)->insert($rowData);
            }
        }
        //用户进入公排,第一名获得3000奖励
        $rows = Db::table($row)
            ->field('id,user_id,user_phone,time,position')
            ->where('time', $time)
            ->order('position', 'asc')->select();
        if (in_array($position, [4, 5, 6, 7])) {
            $user = UserModel::get($rows[0]['user_id']);
            $user['frozen_price'] += $this->$thanks;
            $user->save();
            //余额增加记录
            $list = AccountModel::getAccountData($rows[0]['user_id'], $this->$thanks, '感恩奖', 2, 1,$voucher['type'], $userId);
            AccountModel::create($list);
        }
        //判断第七名进入公排
        if (isset($rowlist) && count($rows) == 7) {
            $this->reCast($rows, $voucherId);
        }
        return true;
    }


    /**
     * @param $prentId
     * @return array
     * 获取用户排位所在位置
     */
    public function getPosition($prentId, $row)
    {
        $parent = Db::table($row)->where('user_id', $prentId)
            ->order('id', 'desc')->find();
        if (empty($parent)) {
            return false;
        }
        $position = [1, 2, 3, 4, 5, 6, 7];
        $rowPosition = Db::table($row)->where(['time' => $parent['time']])->order('position')->column('position');
        $result = array_values(array_diff($position, $rowPosition)) ?: 0;

        return ['time' => $parent['time'], 'position' => $result[0]];
    }


    /**
     * 7人小组满,第一名重新复投
     * 二三名重新公排
     */
    public function reCast($rows, $voucherId)
    {
        $voucher = Db::table('sql_voucher')->where('id', $voucherId)->find();
        if (empty($voucher)) {
            return false;
        }
        $row = 'sql_row' . $voucher['type'];        //进入的公排
        $thanks = 'thanks' . $voucher['type'];       //对应公排的感恩奖
        $money = $voucher['money'];       //对应公排的金额
        $direct = 'direct' . $voucher['type'];       //对应公排的直推奖

        Db::startTrans();
        try {
            /*====================第一名出局,复投,剩余2000转换余额================*/
            $user = UserModel::get($rows[0]['user_id']);
            //若有直推,则冻结金额转化为余额
            $i = 0;
            if (db('users')->where(['pid' => $rows[0]['user_id']])->count() > 0) {
                $conversion = $this->$thanks * 4 - $money;
                $user['balance'] += $conversion;
                $user['total_price'] += $conversion;
                $user['frozen_price'] -= $conversion;    //冻结金额转化余额
                //感恩奖解冻,改变感恩奖记录状态
                $fourId = [
                    $rows[3]['user_id'],
                    $rows[4]['user_id'],
                    $rows[5]['user_id'],
                    $rows[6]['user_id']
                ];
                db('account')->where(['uid' => $user['id'], 'type' => 2, 'from_uid' => ['in', $fourId], 'status' => 1])->update(['status' => 2]);
                //增加余额增加记录
                $lists[$i] = AccountModel::getAccountData($user['id'], $conversion, '冻结金额转化', 10, 1, $voucher['type'], $rows[6]['user_id']);
                $i += 1;
            }
            $lists[$i] = AccountModel::getAccountData($user['id'], $money, '复投激活合伙人', 8, 2, $voucher['type'], $user['id']);
            db('account')->insertAll($lists);
            //第一名复投 扣除10000
            $user['frozen_price'] -= $money;
            $user->save();

            //复投 判断自己是否有下级, 若有下级则直接返上级余额直推奖6000 ,否则返上级冻结金额6000
            if ($user['pid']) {
                $data = [
                    'id' => $user['pid'],
                    'frozen_price' => ['exp', 'frozen_price + ' . $this->$direct],
                ];
                $status = 1;
                if ($user['recommend_num'] > 0) {
                    $data = [
                        'id' => $user['pid'],
                        'balance' => ['exp', 'balance + ' . $this->$direct],
                        'total_price' => ['exp', 'total_price + ' . $this->$direct]
                    ];
                    $status = 2;
                }
                db('users')->update($data);
                $list = AccountModel::getAccountData($user['pid'], $this->$direct, '复投直推奖', 1, 1,$voucher['type'], $user['id'], '', $status);
                AccountModel::create($list);
            }

            $last = db('row')->order('time', 'desc')->value('time');

            /*====================第二名带着下两级公排================*/
            $twoData[0] = RowModel::getRowData($rows[1]['user_id'], $rows[1]['user_phone'], $last + 1, 1);
            $twoData[1] = RowModel::getRowData($rows[3]['user_id'], $rows[3]['user_phone'], $last + 1, 2);
            $twoData[2] = RowModel::getRowData($rows[4]['user_id'], $rows[4]['user_phone'], $last + 1, 3);
            Db::table($row)->insertAll($twoData);
            /*====================第三名带着下两级公排================*/
            $threeData[0] = RowModel::getRowData($rows[2]['user_id'], $rows[2]['user_phone'], $last + 2, 1);
            $threeData[1] = RowModel::getRowData($rows[5]['user_id'], $rows[5]['user_phone'], $last + 2, 2);
            $threeData[2] = RowModel::getRowData($rows[6]['user_id'], $rows[6]['user_phone'], $last + 2, 3);
            Db::table($row)->insertAll($threeData);
            /*====================第一名复投,从新公排================*/
            $result = $this->goQualifying($rows[0]['user_id'], $rows[0]['user_phone'], $voucherId);          //出局找上级,
            if (!$result) {                                 //没有找到上级则从新公排
                $rows[0]['time'] = $last + 3;
                $rows[0]['created_at'] = date('YmdHis');
                unset($rows[0]['id']);
                Db::table($row)->insert($rows[0]);
            }
            Db::commit();
            return true;
        } catch (Exception $e) {
            Db::rollback();
            return false;
//            return $e->getMessage();
        }
    }


}
