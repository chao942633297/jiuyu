<?php

namespace app\home\controller;

use app\backsystem\model\AccountModel;
use app\backsystem\model\ApplyModel;
use app\backsystem\model\RowModel;
use app\backsystem\model\UserModel;
use Thenbsp\Wechat\User\User;
use think\App;
use think\Controller;
use think\Db;
use think\Exception;

class Rebate extends Controller
{

    protected $match;
    protected $direct;
    protected $area_ach;
    protected $city_ach;
    protected $province_ach;
    protected $head_ach;
    protected $comp;
    protected $thanks;
    static $times;

    public function _initialize()
    {
//        parent::_initialize(); // TODO: Change the autogenerated stub
        //参数设置,从配置读取
        $config = file_get_contents('config');
        $conf = unserialize($config);
        $this->direct = $conf['push'];                  //报单中心直推奖励
        $this->match = $conf['act'];                    //匹配报单中心奖励
        $this->area_ach = $conf['area_ach'];            //县级报单中心业绩比例
        $this->city_ach = $conf['city_ach'];            //市级报单中心业绩比例
        $this->province_ach = $conf['province_ach'];    //省级报单中心业绩比例
        $this->head_ach = $conf['head_ach'];    //总部报单中心
        $this->comp = $conf['comp'];    //注册合伙人费用
//        $this->manage = $conf['manage'];    //管理奖
        $this->thanks = $conf['thanks'];    //感恩奖
    }


    /**
     * @param $addr
     * @return bool
     * 用户成为合伙人,地址匹配报单中心返佣
     * 上级报单中心业绩增加
     */
    public function partnerRebate($addr, $userId)
    {
        //首先匹配报单中心,从县级,市级,省级
//        $areaId = db('apply')->where(['province'=>$addr['province'],'city'=>$addr['city'],'area'=>$addr['area'],'status'=>2,'level'=>3])->value('uid');
        //报单中心业绩计算
        $money = 0;
        $achievement = 0;
        $rewordId = getAgentId($addr['province'], $addr['city'], $addr['area']);
        $reword = UserModel::get($rewordId);
        if ($reword['class'] == 3) {
            $achievement = $this->comp * $this->area_ach * 0.01;
            $money = $this->match + $achievement;           //用户余额总增加
        } else if ($reword['class'] == 4) {
            $achievement = $this->comp * $this->city_ach * 0.01;
            $money = $this->match + $achievement;           //用户余额总增加
        } else if ($reword['class'] == 5) {
            $achievement = $this->comp * $this->province_ach * 0.01;
            $money = $this->match + $achievement;       //用户余额总增加
        } else if ($rewordId == 1) {
            $achievement = $this->comp * $this->head_ach * 0.01;
            $money = $this->match + $achievement;       //用户余额总增加
        }
//        if(isset($areaId)){
//            $rewordId = $areaId;
//            $achievement = $this->comp * $this->area_ach * 0.01;
//            $money = $this->match + $achievement;           //用户余额总增加
//        }else if($cityId = db('apply')->where(['province'=>$addr['province'],'city'=>$addr['city'],'status'=>2])->value('uid')){
//            $rewordId = $cityId;
//            $achievement = $this->comp * $this->city_ach * 0.01;
//            $money = $this->match + $achievement;           //用户余额总增加
//        }else if($provinceId = db('apply')->where(['province'=>$addr['province'],'status'=>2])->value('uid')){
//            $rewordId = $provinceId;
//            $achievement = $this->comp * $this->province_ach * 0.01;
//            $money = $this->match + $achievement;       //用户余额总增加
//        }else{
//            //为0则默认系统
//            $rewordId = 1;
//            $achievement = $this->comp * $this->head_ach * 0.01;
//            $money = $this->match + $achievement;       //用户余额总增加
//        }
        Db::startTrans();
        try {
            //增加用户余额
            $newList = [
                'balance' => ['exp', 'balance + ' . $money],
                'total_price' => ['exp', 'total_price + ' . $money],
                'id' => $rewordId
            ];
            db('users')->update($newList);
            //增加余额记录
            $lists[0] = AccountModel::getAccountData($rewordId, $this->match, '激活奖', 8, 1, $userId);
            if ($achievement > 0) {
                $lists[1] = AccountModel::getAccountData($rewordId, $achievement, '业绩分红', 9, 1, $userId);
            }
            db('account')->insertAll($lists);
            Db::commit();
            return true;
        } catch (Exception $e) {
            Db::rollback();
            return false;
//            return $e->getMessage();
        }
    }


    /**
     * @param $prentId
     * @return bool
     * 成为合伙人,上级报单中心返佣
     */
    public function superRebate($userId, $prentId = '')
    {
        if (empty($prentId)) {
            $prentId = db('users')->where('id', $userId)->value('pid');
        }
        //用户没有上级
        if (empty($prentId)) {
            return true;
        }
        $prent = UserModel::get($prentId);
        //路人甲没有返佣
        if ($prent['class'] < 2) {
            return true;
        }
        Db::startTrans();
        try {
            //上级余额增加
            $newList = [
                'id' => $prentId,
                'recommend_num' =>['exp','recommend_num + 1'],
                'balance' => ['exp', 'balance + ' . $this->direct],
                'total_price'=>['exp','total_price + '.$this->direct]
            ];
            $status = 2;
            $once_direct = 0;
            if (db('users')->where(['pid'=>$prentId,'class'=>['GT',1]])->count() < 2) {
                $newList = [
                    'id' => $prentId,
                    'recommend_num' =>['exp','recommend_num + 1'],
                    'direct_frozen' => ['exp', 'direct_frozen + ' . $this->direct]
                ];
                $status = 1;
                $once_direct = 1;
            }
            db('users')->update($newList);
            //增加余额记录
            $list = AccountModel::getAccountData($prentId, $this->direct, '直推奖', 1, 1, $userId, '', $status, $once_direct);
            AccountModel::create($list);
            //查看上级是否存在上级, 上二级冻结金额转化为余额
            $twoId = db('users')->where('id', $prentId)->value('pid');
            if ($twoId) {
                $totalMoney = db('account')->where(['uid' => $twoId, 'from_uid' => $prentId, 'once_direct' => 0, 'type' => 1, 'status' => 1])->sum('balance');
                $newList = [
                    'id' => $twoId,
                    'balance' => ['exp', 'balance + ' . $totalMoney],
                    'total_price' => ['exp', 'total_price + ' . $totalMoney],
                    'frozen_price' => ['exp', 'frozen_price - ' . $totalMoney]
                ];
                db('users')->update($newList);
                //修改直推奖状态
                db('account')->where(['uid' => $twoId, 'from_uid' => $prentId, 'once_direct' => 0, 'type' => 1, 'status' => 1])->update(['status' => 2]);
            }
            //查看上级是否存在复投2000的感恩奖
//            if ($prentId != 1) {
//            if (count($selfCount) > 1) {
            if (db('users')->where(['pid'=>$prentId,'class'=>['GT',1]])->count() < 2) {
                $selfCount = db('row')->where(['user_id' => $prentId, 'position' => 1])->select();
                foreach ($selfCount as $key => $val) {
                    $time = $val['time'];
                    $row = RowModel::all(function ($query) use ($time) {
                        $query->order('position', 'asc');
                        $query->field('id,user_id,user_phone,time,position');
                        $query->where('time', $time);
                    });
                    if (count($row) == 7) {
                        $conversion = $this->thanks * 4 - $this->comp;

                        //感恩奖纪录改变
                        $fourId = [
                            $row[3]['user_id'],
                            $row[4]['user_id'],
                            $row[5]['user_id'],
                            $row[6]['user_id']
                        ];
                        $res = db('account')->where(['uid' => $prentId, 'type' => 2, 'from_uid' => ['in', $fourId], 'status' => 1])->update(['status' => 2]);
                        if($res){
                            $data = [
                                'id' => $prentId,
                                'balance' => ['exp', 'balance +' . $conversion],
                                'total_price' => ['exp', 'total_price + ' . $conversion],
                                'frozen_price' => ['exp', 'frozen_price -' . $conversion]
                            ];
                            db('users')->update($data);
                            $list[] = AccountModel::getAccountData($prentId, $conversion, '冻结金额转化', 10, 1, $row[6]['user_id']);
                        }
                        //增加余额增加记录
                    }
                }
                db('account')->insertAll($list);
            }
            Db::commit();
            return true;
        } catch
        (Exception $e) {
            Db::rollback();
            return false;
//            return $e->getMessage();
        }

    }

    //成为合伙人进入公排
    public function goQualifying($userId, $user_phone, $prentId = '')
    {
        if (empty($prentId)) {
            $prentId = db('users')->where('id', $userId)->value('pid');
        }
        if (empty($prentId)) {
            return false;
        }
        //根据上级在公排的位置,获取自己的位置,
        /*  $result = $this->getPosition($prentId,3);
          $time = self::$times;
          $position = isset($result[0])?$result[0]:0;
          if(isset($result['time']) && $result['time']){
              $arr = [1,2,3,4,5,6,7];
              $time = explode(',',$result['time'])[0];
              $pos = explode(',',$result['position']);
              $position = array_values(array_diff($arr,$pos))[0];
          }*/
        $result = $this->getPosition($prentId);
        $time = $result['time'];
        $position = $result['position'];
        if ($time && $position) {
            $list = RowModel::getRowData($userId, $user_phone, $time, $position);
            $rowlist = RowModel::create($list);
        }else{
            return false;
        }
        //用户进入公排,第一名获得3000奖励
        $rows = RowModel::all(function ($query) use ($time) {
            $query->order('position', 'asc');
            $query->field('id,user_id,user_phone,time,position');
            $query->where('time', $time);
        });
        if (in_array($position, [4, 5, 6, 7])) {
            $user = UserModel::get($rows[0]['user_id']);
            $user['frozen_price'] += $this->thanks;
            $user->save();
            //余额增加记录
            $list = AccountModel::getAccountData($rows[0]['user_id'], $this->thanks, '感恩奖', 2, 1, $userId);
            AccountModel::create($list);
        }
        //判断第七名进入公排
        if (isset($rowlist) && count($rows) == 7) {
            $this->reCast($rows);
        }
        return true;
    }

    //获取排位所在位置
    public function getPosition_old($prentId, $num)
    {
        $result = [];
        $parent = RowModel::get(function ($query) use ($prentId) {
            $query->order('id', 'desc');
            $query->where(['user_id' => $prentId]);
        });
        self::$times = $parent['time'];
        $position = [1, 2, 3, 4, 5, 6, 7];
        $rowPosition = db('row')->where(['time' => $parent['time']])->order('position')->column('position');
        if ($parent['position'] == 1) {
            $result = array_values(array_diff($position, $rowPosition));
        } else if ($parent['position'] == 2) {
            $result = array_values(array_diff([4, 5], $rowPosition));
        } else if ($parent['position'] == 3) {
            $result = array_values(array_diff([6, 7], $rowPosition));
        }
        if (empty($result)) {
            if ($num != 0) {
                $num--;
                $result = $this->getPosition(db('users')->where('id', $prentId)->value('pid'), $num);   //若上级位置不是1 2 3 则查找上二代,三代位置
            } else {
                //上三代都找不到位置
                $last = RowModel::all(function ($query) {
                    $query->field('group_concat(time order by position asc) as time,group_concat(position order by position asc) as position ');
                    $query->group('time');
                });
                foreach ($last as $key => $val) {
                    if (substr_count($val['time'], ',') != 6) {
                        return $val;
                    }
                }
            }
        }
        return $result;
    }


    /**
     * @param $prentId
     * @return array
     * 获取用户排位所在位置
     */
    public function getPosition($prentId)
    {
        $parent = RowModel::get(function ($query) use ($prentId) {
            $query->order('id', 'desc');
            $query->where(['user_id' => $prentId]);
        });
        if(empty($parent)){
            return false;
        }
        $position = [1, 2, 3, 4, 5, 6, 7];
        $rowPosition = db('row')->where(['time' => $parent['time']])->order('position')->column('position');
        $result = array_values(array_diff($position, $rowPosition));

        return ['time' => $parent['time'], 'position' => $result[0]];
    }




    /**
     * 7人小组满,第一名重新复投
     * 二三名重新公排
     */
    public function reCast($row)
    {
        Db::startTrans();
        try {
            /*====================第一名出局,复投,剩余2000转换余额================*/
            $user = UserModel::get($row[0]['user_id']);
            //若有直推,则冻结金额转化为余额
            $i = 0;
            if (db('users')->where(['pid' => $row[0]['user_id']])->count() > 0) {
                $conversion = $this->thanks * 4 - $this->comp;
                $user['balance'] += $conversion;
                $user['total_price'] += $conversion;
                $user['frozen_price'] -= $conversion;    //冻结金额转化余额
                //感恩奖解冻,改变感恩奖记录状态
                $fourId = [
                    $row[3]['user_id'],
                    $row[4]['user_id'],
                    $row[5]['user_id'],
                    $row[6]['user_id']
                ];
                db('account')->where(['uid' => $user['id'], 'type' => 2, 'from_uid' => ['in', $fourId], 'status' => 1])->update(['status' => 2]);
                //增加余额增加记录
                $lists[$i] = AccountModel::getAccountData($user['id'], $conversion, '冻结金额转化', 10, 1, $row[6]['user_id']);
                $i += 1;
            }
            $lists[$i] = AccountModel::getAccountData($user['id'], $this->comp, '复投激活合伙人', 8, 2, $user['id']);
            db('account')->insertAll($lists);
            //第一名复投 扣除10000
            $user['frozen_price'] -= $this->comp;
            $user->save();

            //复投 判断自己是否有下级, 若有下级则直接返上级余额直推奖6000 ,否则返上级冻结金额6000
            if ($user['pid']) {
                $data = [
                    'id'=>$user['pid'],
                    'frozen_price'=>['exp','frozen_price + '.$this->direct],
                ];
                $status = 1;
                if ($user['recommend_num'] > 0) {
                    $data = [
                        'id'=>$user['pid'],
                        'balance'=>['exp','balance + '.$this->direct],
                        'total_price'=>['exp','total_price + '.$this->direct]
                    ];
                    $status = 2;
                }
                db('users')->update($data);
                $list = AccountModel::getAccountData($user['pid'], $this->direct, '复投直推奖', 1, 1, $user['id'], '', $status);
                AccountModel::create($list);
            }

            $last = db('row')->order('time', 'desc')->value('time');
            /*====================第一名复投,从新公排================*/
            $result = $this->goQualifying($row[0]['user_id'],$row[0]['user_phone']);          //出局找上级,
            if(!$result){                                 //没有找到上级则从新公排
                $row[0]['time'] = $last + 1;
                $row[0]['created_at'] = date('YmdHis');
                unset($row[0]['id']);
                RowModel::insert(objToArray($row[0]));
            }
            /*====================第二名带着下两级公排================*/
            $twoData[0] = RowModel::getRowData($row[1]['user_id'], $row[1]['user_phone'], $last + 2, 1);
            $twoData[1] = RowModel::getRowData($row[3]['user_id'], $row[3]['user_phone'], $last + 2, 2);
            $twoData[2] = RowModel::getRowData($row[4]['user_id'], $row[4]['user_phone'], $last + 2, 3);
            RowModel::insertAll($twoData);
            /*====================第三名带着下两级公排================*/
            $threeData[0] = RowModel::getRowData($row[2]['user_id'], $row[2]['user_phone'], $last + 3, 1);
            $threeData[1] = RowModel::getRowData($row[5]['user_id'], $row[5]['user_phone'], $last + 3, 2);
            $threeData[2] = RowModel::getRowData($row[6]['user_id'], $row[6]['user_phone'], $last + 3, 3);
            RowModel::insertAll($threeData);
            Db::commit();
            return true;
        } catch (Exception $e) {
            Db::rollback();
            return false;
//            return $e->getMessage();
        }
    }


}
