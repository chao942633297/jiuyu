<?php
namespace app\home\controller;



 use app\backsystem\controller\File;
 use app\backsystem\model\CardModel;
 use app\backsystem\model\UserModel;
 use Service\QRcode;
 use Service\QRimage;
 use think\Controller;
 use think\Db;
 use think\Image;
 use think\Request;
 use think\Validate;

 class Users extends Base{

     protected $userId;

     public function _initialize()
     {
         parent::_initialize(); // TODO: Change the autogenerated stub
         $this->userId = session('home_user_id');
     }

     #个人中心
    public function index(){
        $user = UserModel::get($this->userId);
        $return = [];
        $return['nickname'] = $user['nickname'];
        $return['p_phone'] = $user['pusers']['phone'];
        $return['headimgurl'] = $user['headimgurl'];
        $return['class'] = config('user_class')[$user['class']];
        $return['level'] = $user['class'];

        $apply = db('apply')->where(['uid'=>$this->userId,'status'=>['lt',4]])->select();
        $return['prompt'] = 0;
        $return['voucher'] = 0;
        foreach($apply as $key=>$val){
            if($val['status'] == 2){
                if($user['class'] == 3){
                    $return['class'] = $val['city'].$val['area'] . '报单中心';
                }else if($user['class'] == 4){
                    $return['class'] = $val['province'].$val['city'] . '报单中心';
                }else if($user['class'] == 5){
                    $return['class'] = $val['province'] . '报单中心';
                }
            }
            if($val['status'] == 3){           //判断被拒绝,提示用户
                $return['prompt'] = 1;
                db('apply')->where('id',$val['id'])->update(['status'=>4]);
            }
        }
        $voucher = db('voucher')->where(['uid'=>$this->userId,'status'=>3])->find();
        if($voucher){
            $return['voucher'] = 1;
            db('voucher')->where('id',$voucher['id'])->update(['status'=>4]);
        }
    	return json(['data'=>$return,'msg'=>'查询成功','code'=>200]);
    }

     /**
      * @return \think\response\Json
      * 编辑用户资料
      * 页面
      */
    public function editUser(){
        $user = UserModel::get($this->userId);
        $return = [];
        $return['headimgurl'] = $user->headimgurl;
        $return['nickname'] = $user->nickname;
        $return['address'] = '';
        if($user->address){
            $return['address'] =$user->address->province . $user->address->city . $user->address->area;
        }
        $return['phone'] = $user->phone;
        return json(['status'=>1,'message'=>'查询成功','data'=>$return]);
    }

     /**
      * @return \think\response\Json
      * 保存用户资料
      */
    public function actEditUser(Request $request)
    {
        $nickname = $request->param('nickname');
        $input = $request->post();
        $file =$request->file('headImg');
        $data = [];
        if(isset($file)){
            $imgurl = File::upload($file);
            $data['headimgurl'] = $imgurl->getData()['data'];
        }
        $data['nickname'] = $input['nickname'];
        $data['truename'] = $input['truename'];
        $data['updated_at'] = date('YmdHis');
        $res = db('users')->where('id',$this->userId)->update($data);
        if($res){
            return json(['msg'=>'保存成功','code'=>200]);
        }
        return json(['msg'=>'保存失败','code'=>1001]);
    }

     /**
      * @return int
      * 实名认证
      * 页面
      */
     public function userCard(){
        $user = UserModel::get($this->userId);
        $return = [];
        $return['card_name'] = $user['card']['card_name'];
        $return['card_number'] = $user['card']['card_number'];
        return json(['data'=>$return,'msg'=>'查询成功','code'=>200]);
    }

     /**
      *保存用户实名认证
      */
    public function actUserCard(Request $request){
        $input = $request->post();
        $data = [];
        if(!preg_match('/^(\d{15}$|^\d{18}$|^\d{17}(\d|X|x))$/',$input['card_number'])){
            return json(['msg'=>'请输入正确的身份证号','code'=>1002]);
        }
        if($input['card_name']){
            $data['card_name'] = $input['card_name'];
        }
        if($input['card_number']){
            $data['card_number'] = $input['card_number'];
        }
        $data['uid'] = $this->userId;
        $data['created_at'] = date('YmdHis');
        $res = CardModel::create($data);
        if($res){
            return json(['msg'=>'保存成功','code'=>200]);
        }
        return json(['msg'=>'保存失败','code'=>1001]);
    }

     /**
      * @return \think\response\Json
      * 我的授权书
      */
    public function toGrent(){
        $user = UserModel::get($this->userId);
        if($user['class'] < 3){
            return json(['msg'=>'级别不足','code'=>1001]);
        }
        $return = [];
        $apply = $user->apply()->where(['uid'=>$this->userId,'status'=>2])->find();
        $return['real_name'] = $user['truename'];
        $return['class'] = config('user_class')[$user['class']];
        $return['created_at'] = substr($apply['created_at'],0,10);
        $return['company'] = '重庆都车汽车销售有限公司';
        return json(['data'=>$return,'msg'=>'查询成功','code'=>200]);
    }

     /**
      * @return \think\response\Json
      * 用户设置
      */
     public function userSetting(){
         $user = UserModel::get($this->userId);
         $return = [];
         $return['alipay'] = hideStar($user['alipay']['alipay_account']);
         $return['openid'] = $user['openid'];
         return json(['data'=>$return,'msg'=>'查询成功','code'=>200]);
     }

     /**
      * @return \think\response\Json
      * 绑定支付宝页面
      */
     public function webBindAlipay(){
         $phone = Db::table('sql_users')->where('id',$this->userId)->value('phone');
         return json(['data'=>$phone,'msg'=>'查询成功','code'=>200]);
     }


     /**
      * @param Request $request
      * 执行绑定支付宝
      */
     public function actBindAlipay(Request $request){
        $input = $request->post();
        if(empty($input['account'])){
            return json(['msg'=>'支付宝账号不能为空','code'=>1001]);
        }else if(empty($input['name'])){
            return json(['msg'=>'真实姓名不能为空','code'=>1001]);
        }else if(empty($input['password'])){
            return json(['msg'=>'登陆密码不能为空','code'=>1001]);
        }else if(empty($input['code'])){
            return json(['msg'=>'验证码不能为空','code'=>1001]);
        }
         $user = Db::table('sql_users')->where('id',$this->userId)->find();
         if(md5($input['password']) !== $user['password']){
             return json(['msg'=>'登陆密码错误','code'=>1002]);
         }
         $time = time() - 600;
         $codeData = db('code')->where(['phone'=>$user['phone'],'type'=>5,'status'=>1])->order('id','desc')->find();
         //TODO:获取验证码
         if($user['phone'] != $codeData['phone'] || $input['code'] != $codeData['code']){
             return json(['msg'=>'验证码不正确','code'=>1002]);
         }
         if(strtotime($codeData['created_at']) < $time ){
             return json(['msg'=>'验证码已失效,请重新获取','code'=>1010]);
         }
         $alipayData = [];
         $alipayData['user_id'] = $this->userId;
         $alipayData['alipay_account'] = $input['account'];
         $alipayData['alipay_name'] = $input['name'];
         $alipayData['created_at'] = date('YmdHis');
        $res = Db::table('sql_user_alipay')->insert($alipayData);
         if($res){
             return json(['msg'=>'绑定成功','code'=>200]);
         }
         return json(['msg'=>'绑定失败','code'=>1004]);
     }







     //获取用户手机号 --修改密码使用
     public function getMyPhone(){
        $phone = db('users')->where('id',$this->userId)->value('phone');
         return json(['data'=>$phone,'msg'=>'查询成功','code'=>200]);
     }

     /**
      * @param Request $request
      * @return \think\response\Json
      * @throws \think\Exception
      * 修改密码(支付密码/登陆密码)
      */
     public function editPassword(Request $request){
         $rule = [
             'code'=>'require',
             'password'=>'require|alphaDash',
             'repassword'=>'require|confirm:password',

         ];
         $msg = [
             'code'=>'验证码不能为空',
             'password.require'=>'新密码不能为空',
             'password.alphaDash'=>'密码只能是字母、数字和下划线_及破折号-',
             'repassword.require'=>'确认密码不能为空',
             'repassword.confirm'=>'确认密码和新密码不一致'
         ];

         $input = $request->post();
         $validate = new Validate($rule,$msg);
         if(!$validate->check($input)){
             return json(['msg'=>$validate->getError(),'code'=>1001]);
         }
         $phone = UserModel::get($this->userId)['phone'];
         $code = $input['code'];
         $time = time() - 600;
         $codeData = db('code')->where(['phone'=>$phone,'type'=>2,'status'=>1])->order('id','desc')->find();
         //TODO:获取验证码
         if($phone != $codeData['phone'] || $code != $codeData['code']){
             return json(['msg'=>'验证码不正确','code'=>1002]);
         }
         if(strtotime($codeData['created_at']) < $time ){
             return json(['msg'=>'验证码已失效,请重新获取','code'=>1010]);
         }
         $type = 'password';
         if(isset($input['type']) && $input['type'] == 1){
             //修改支付密码
             $type = 'two_password';
         }
         $data[$type] = md5($input['password']);
         $res = db('users')->where('id',$this->userId)->update($data);
         if($res){
             db('code')->where('id',$codeData['id'])->update(['status'=>2]);
             return json(['msg'=>'修改成功','code'=>200]);
         }
         return json(['msg'=>'修改失败','code'=>1004]);
     }


     //我的二维码
     public function myQcode(){
         $user = UserModel::get($this->userId);
         if($user['class'] < 2){
             return json(['msg'=>'需成为合伙人后才生成推广二维码','code'=>1001]);
         }
         $name = 'userqcode'.$this->userId;
         $path = 'uploads/qcodeLogo/'.$name.'.png';     //的二维码
         if(!file_exists($path)){
             $value=config('front_domain').'register?prentId='.$this->userId;
             $errorCorrectionLevel = "H"; // 纠错级别：L、M、Q、H
             $matrixPointSize = "4"; // 点的大小：1到10
             QRcode::png($value,$path, $errorCorrectionLevel, $matrixPointSize);
         }

         $user = UserModel::get($this->userId);
         $return = [];
         $return['userId'] = $user['id'];
         $return['headimgurl'] = $user['headimgurl'];
         $return['nickname'] = $user['nickname'];
         $return['pushQcode'] = config('back_domain').$path;
         return json(['data'=>$return,'msg'=>'生成成功','code'=>200]);
     }

     //我的二维码
 /*    public function myQcode(){
         $user = UserModel::get($this->userId);
         if($user['class'] < 2){
             return json(['msg'=>'需成为合伙人后才生成推广二维码','code'=>1001]);
         }
         $name = 'userqcode'.$this->userId;
         $filename = 'uploads/qcode/'.$name.'.png';      //不带logo 二维码
         $path = 'uploads/qcodeLogo/'.$name.'.png';     //带logo的二维码
         $logo = $user['headimgurl']; //准备好的logo图片
         if(db('qrcode')->where('uid',$this->userId)->value('logo') != $logo){
             if(!file_exists($filename)){
                 db('qrcode')->insert(['uid'=>$this->userId,'logo'=>$logo]);
             }else{
                 db('qrcode')->where(['uid'=>$this->userId])->update(['logo'=>$logo]);
             }
             $value=config('front_domain').'register?prentId='.$this->userId;
             $errorCorrectionLevel = "H"; // 纠错级别：L、M、Q、H
             $matrixPointSize = "4"; // 点的大小：1到10
             QRcode::png($value,$filename, $errorCorrectionLevel, $matrixPointSize);

             $QR = $filename;            //已经生成的原始二维码图
             if (!file_exists($logo)) {
                 $QR = imagecreatefromstring(file_get_contents($QR));        //目标图象连接资源。
                 $logo = imagecreatefromstring(file_get_contents($logo));    //源图象连接资源。
                 $QR_width = imagesx($QR);           //二维码图片宽度
                 $QR_height = imagesy($QR);          //二维码图片高度
                 $logo_width = imagesx($logo);       //logo图片宽度
                 $logo_height = imagesy($logo);      //logo图片高度
                 $logo_qr_width = $QR_width / 4;     //组合之后logo的宽度(占二维码的1/5)
                 $scale = $logo_width/$logo_qr_width;    //logo的宽度缩放比(本身宽度/组合后的宽度)
                 $logo_qr_height = $logo_height/$scale;  //组合之后logo的高度
                 $from_width = ($QR_width - $logo_qr_width) / 2;   //组合之后logo左上角所在坐标点
                 //重新组合图片并调整大小

                  // imagecopyresampled() 将一幅图像(源图象)中的一块正方形区域拷贝到另一个图像中

                 imagecopyresampled($QR, $logo, $from_width, $from_width, 0, 0, $logo_qr_width,$logo_qr_width, $logo_width, $logo_width);
             }
             imagepng($QR,$path);
             imagedestroy($QR);
             imagedestroy($logo);
         }
         $user = UserModel::get($this->userId);
         $return = [];
         $return['userId'] = $user['id'];
         $return['headimgurl'] = $user['headimgurl'];
         $return['nickname'] = $user['nickname'];
         $return['pushQcode'] = config('back_domain').$path;
         return json(['data'=>$return,'msg'=>'生成成功','code'=>200]);
     }*/


     /**
      * 退出
      */
    public function loginOut(){
        session_destroy();
        $_SESSION = '';
        return json(['msg'=>'退出成功','code'=>200]);
    }








}